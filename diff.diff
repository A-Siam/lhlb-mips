diff --git a/alu.sv b/alu.sv
index d3c801b..2860e49 100644
--- a/alu.sv
+++ b/alu.sv
@@ -4,6 +4,7 @@ module alu(input logic [31:0] a,b,
             output logic  zero);
 
 
+
 always_comb
         case(f)
         3'b000: y=a&b;
@@ -20,8 +21,6 @@ always_comb
         end
         default: y=0;
         endcase
-
-
         assign zero =~(|y);
 
 
diff --git a/aludec.sv b/aludec.sv
index 0f02282..88d7505 100644
--- a/aludec.sv
+++ b/aludec.sv
@@ -6,11 +6,12 @@ always_comb
     case(aluop)
         2'b00: alucontrol <= 3'b010; // add (for lw/sw/addi)
         2'b01: alucontrol <= 3'b110; // sub (for beq)
-        2'b11: alucontrol <= 3'b001;
+        2'b11: alucontrol <= 3'b001; // ORI
         default: case(funct) // R-type instructions
             6'b100000: alucontrol <= 3'b010; // add
             6'b100010: alucontrol <= 3'b110; // sub
             6'b100100: alucontrol <= 3'b000; // and
+            //BUG?
             6'b100101: alucontrol <= 3'b001; // or
             6'b101010: alucontrol <= 3'b111; // slt
             default: alucontrol <= 3'bxxx; // ???
diff --git a/controller.sv b/controller.sv
index 4ffcc48..f5d1a1d 100644
--- a/controller.sv
+++ b/controller.sv
@@ -6,13 +6,15 @@ module controller(input logic [5:0] op, funct,
                     output logic regdst, regwrite,
                     output logic jump,
                     output logic ne,
+                    output logic half,
+                    output logic b,
                     output logic [2:0] alucontrol);
 
 logic [1:0] aluop;
 logic branch;
 
 maindec md(op, memtoreg, memwrite, branch,
-            alusrc, regdst, regwrite, jump,ne, aluop);
+            alusrc, regdst, regwrite, jump, ne, half, b, aluop);
 
 aludec ad(funct, aluop, alucontrol);
 
diff --git a/datapath.sv b/datapath.sv
index 5d76392..6d9ba67 100644
--- a/datapath.sv
+++ b/datapath.sv
@@ -3,7 +3,7 @@ module datapath(input logic clk, reset,
                 input logic [1:0] alusrc,
                 input logic ne,
                 input logic regdst,
-                input logic regwrite, jump,
+                input logic regwrite, jump, half,b,
                 input logic [2:0] alucontrol,
                 output logic zero,
                 output logic [31:0] pc,
@@ -16,7 +16,11 @@ module datapath(input logic clk, reset,
     logic [31:0] pcnext, pcnextbr, pcplus4, pcbranch;
     logic [31:0] signimm, signimmsh;
     logic [31:0] srca, srcb;
-    logic [31:0] result;
+    logic [31:0] result_T; 
+    logic [31:0] half_result_extended;
+    logic [31:0] hw_dataMemeoryOutput; // datamemory after the half word design
+    logic [31:0] result; // datamemory after the one byte design
+    logic [31:0] one_byte_result_sign_extended;
 
     // next PC logic
     flopr #(32) pcreg(clk, reset, pcnext, pc);
@@ -27,17 +31,31 @@ module datapath(input logic clk, reset,
 
     adder pcadd2(pcplus4, signimmsh, pcbranch); //branch or jumb
 
+    //half
+    signext se2(result_T[15:0], half_result_extended); //extend sign
+    //mux after the halfword
+    mux2 #(32) halfmux(result_T,half_result_extended,half,hw_dataMemeoryOutput);
+
+    // one byte
+    signex #(24,8) se3(result_T[7:0], one_byte_result_sign_extended);
+    //mux after the one byte word
+    mux2 #(32) ob_mux(hw_dataMemeoryOutput,
+                       one_byte_result_sign_extended,
+                       b,
+                       result);
+
+
     mux2 #(32) pcbrmux(pcplus4, pcbranch, pcsrc, pcnextbr);
     mux2 #(32) pcmux(pcnextbr, {pcplus4[31:28],
                     instr[25:0], 2'b00}, jump, pcnext);
 
-    // register file logic
+
     regfile rf(clk, regwrite, instr[25:21], instr[20:16],
                 writereg, result, srca, writedata);
 
     mux2 #(5) wrmux(instr[20:16], instr[15:11],
                     regdst, writereg);
-    mux2 #(32) resmux(aluout, readdata, memtoreg, result);
+    mux2 #(32) resmux(aluout, readdata, memtoreg, result_T);
 
     signext se(instr[15:0], signimm); //extend sign
 
diff --git a/maindec.sv b/maindec.sv
index b8b81b8..9b1e01b 100644
--- a/maindec.sv
+++ b/maindec.sv
@@ -5,24 +5,28 @@ module maindec(input logic [5:0] op,
     output logic regdst, regwrite,
     output logic jump,
     output logic ne,
+    output logic half,
+    output logic b,
     output logic [1:0] aluop);
 
-logic [10:0] controls;
+logic [12:0] controls;
 
 assign {regwrite, regdst, alusrc, branch, memwrite,
-        memtoreg, jump, aluop, ne} = controls;
+        memtoreg, jump, aluop, ne,half, b} = controls;
 
 
 always_comb
     case(op)
-        6'b000000: controls <= 11'b11000000100; // RTYPE
-        6'b100011: controls <= 11'b10010010000; // LW
-        6'b101011: controls <= 11'b00010100000; // SW
-        6'b000100: controls <= 11'b00001000010; // BEQ
-        6'b001000: controls <= 11'b10010000000; // ADDI
-        6'b001101: controls <= 11'b10110000110; // ORI
-        6'b000010: controls <= 11'b00000001000; // J
-        6'b000101: controls <= 11'b00001000011;  // BNQ
-        default: controls <= 9'bxxxxxxxxx; // illegal op
+        6'b000000: controls <= 13'b1100000010000; // RTYPE
+        6'b100011: controls <= 13'b1001001000000; // LW
+        6'b101011: controls <= 13'b0001010000000; // SW
+        6'b000100: controls <= 13'b0000100001000; // BEQ
+        6'b001000: controls <= 13'b1001000000000; // ADDI
+        6'b001101: controls <= 13'b1011000011000; // ORI
+        6'b000010: controls <= 13'b0000000100000; // J
+        6'b000101: controls <= 13'b0000100001100;  // BNQ
+        6'b100001: controls <= 13'b1001001000010; // LH
+        6'b100000: controls <= 13'b1001001000011; // LB
+        default: controls <= 13'bxxxxxxxxxxxxx; // illegal op
     endcase
 endmodule
\ No newline at end of file
diff --git a/mips.sv b/mips.sv
index c04a384..7c521c2 100644
--- a/mips.sv
+++ b/mips.sv
@@ -6,7 +6,7 @@ module mips(input logic clk, reset,
             input logic [31:0] readdata);
 
 logic memtoreg, ne, regdst,
-    regwrite, jump, pcsrc, zero;
+    regwrite, jump, pcsrc, zero, half,b;
 
 logic [1:0] alusrc;
 
@@ -14,11 +14,11 @@ logic [2:0] alucontrol;
 
 controller c(instr[31:26], instr[5:0], zero,
             memtoreg, memwrite, pcsrc,
-            alusrc, regdst, regwrite, jump,ne,
+            alusrc, regdst, regwrite, jump,ne,half,b,
             alucontrol);
 
 datapath dp(clk, reset, memtoreg, pcsrc,
-            alusrc, ne, regdst, regwrite, jump,
+            alusrc, ne, regdst, regwrite, jump,half,b,
             alucontrol,
             zero, pc, instr,
             aluout, writedata, readdata);
diff --git a/mux.sv b/mux.sv
new file mode 100644
index 0000000..e69de29
diff --git a/signex.sv b/signex.sv
new file mode 100644
index 0000000..3c834b6
--- /dev/null
+++ b/signex.sv
@@ -0,0 +1,8 @@
+//parameterized sign extenstion by abdullah khaled
+module signex #(parameter extamount = 16,parameter inputsize = 16)
+			   (input [inputsize-1:0]x,
+			   output [inputsize+extamount-1:0]o);
+
+assign o = {{extamount{x[inputsize-1]}},x};
+
+endmodule
\ No newline at end of file
diff --git a/testbench.sv b/testbench.sv
index 1946610..aa93cc9 100644
--- a/testbench.sv
+++ b/testbench.sv
@@ -24,7 +24,7 @@ always
 always @(negedge clk)
     begin
         if (memwrite) begin
-            if (dataadr === 84 & writedata === -33022) begin
+            if (dataadr === 80 & writedata === 32'b11111111111111111111111111111010) begin
                     $display("Simulation succeeded");
                     $stop;
             end else if (dataadr !== 80) begin
diff --git a/zzzz.sv b/zzzz.sv
new file mode 100644
index 0000000..f5d1a1d
--- /dev/null
+++ b/zzzz.sv
@@ -0,0 +1,25 @@
+module controller(input logic [5:0] op, funct,
+                    input logic zero,
+                    output logic memtoreg, memwrite,
+                    output logic pcsrc, 
+                    output logic [1:0] alusrc,
+                    output logic regdst, regwrite,
+                    output logic jump,
+                    output logic ne,
+                    output logic half,
+                    output logic b,
+                    output logic [2:0] alucontrol);
+
+logic [1:0] aluop;
+logic branch;
+
+maindec md(op, memtoreg, memwrite, branch,
+            alusrc, regdst, regwrite, jump, ne, half, b, aluop);
+
+aludec ad(funct, aluop, alucontrol);
+
+logic  bne_rc;
+assign bne_rc = ne ^ zero ;
+assign pcsrc = branch & bne_rc;
+
+endmodule
\ No newline at end of file
